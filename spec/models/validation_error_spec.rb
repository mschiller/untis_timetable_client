=begin
#WebUntis Timetable API Documentation

#*WebUntis timetable API*  Gets from WebUntis all data needed to display a timetable. Can filter for by resource (student, teacher, room, class or lesson). Can include all periods or only changed periods. Includes current state and changes from the scheduling timetable.   How to get the data of the current timetable:  Request data providing: - a start and end date - a filter criteria     - a resource id(s) for whom to view the timetable: student/teacher/room/class/lesson/period     - a timestamp for changes only   From the response: 1. Take all periods with PeriodStatusEnum values except CANCELLED. 2. For each of these periods take all resources with ResourceStatusEnum values of REGULAR and ADDED. 3. These resources are referenced by id in the periods. 4. Look up the resource in MasterDataDto. 5. Use displayName of the resource.  Display the resulting data in a suitable format.   Version history: - v1    2022-05     stw         Initial version  - v2    2023-02     stw         multiple ids as filter parameter / period as filter parameter / text fields in PeriodDto / deprecation of detailsUrl /                                 flag for online period / related period id for moved periods / period is modified when assigned students change - v3    2023-07     stw         Error handling now identical to other Untis APIs

The version of the OpenAPI document: 2.0.0
Contact: support@untis.at
Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'spec_helper'
require 'json'
require 'date'

# Unit tests for UntisTimetableClient::ValidationError
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe UntisTimetableClient::ValidationError do
  let(:instance) { UntisTimetableClient::ValidationError.new }

  describe 'test an instance of ValidationError' do
    it 'should create an instance of ValidationError' do
      # uncomment below to test the instance creation
      #expect(instance).to be_instance_of(UntisTimetableClient::ValidationError)
    end
  end

  describe 'test attribute "error_key"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["field.mustBeMin", "field.mustBeMax", "field.mustBeNull", "field.mustNotBeNull", "field.mustNotBeEmpty", "field.mustNotBeBlank", "field.sizeInvalid", "field.digitsMustMatch", "field.mustBeEmail", "field.mustBeFuture", "field.mustBeFutureOrPresent", "field.mustBePast", "field.mustBePastOrPresent", "field.mustBePositive", "field.mustBePositiveOrZero", "field.mustBeNegative", "field.mustBeNegativeOrZero", "field.mustMatchPattern", "value.mustHaveIdentity", "value.mustBeBefore", "value.mustBeAfter", "value.alreadyExists", "value.mustBeUnique", "value.other", "entity.notFound", "entity.duplicateFound", "entity.other"])
      # validator.allowable_values.each do |value|
      #   expect { instance.error_key = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "path"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  describe 'test attribute "constraint_value"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  describe 'test attribute "error_message"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  describe 'test attribute "index"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  describe 'test attribute "error_data"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
