=begin
#WebUntis Timetable API Documentation

#*WebUntis timetable API*  Gets from WebUntis all data needed to display a timetable. Can filter for by resource (student, teacher, room, class or lesson). Can include all periods or only changed periods. Includes current state and changes from the scheduling timetable.   How to get the data of the current timetable:  Request data providing: - a start and end date - a filter criteria     - a resource id(s) for whom to view the timetable: student/teacher/room/class/lesson/period     - a timestamp for changes only   From the response: 1. Take all periods with PeriodStatusEnum values except CANCELLED. 2. For each of these periods take all resources with ResourceStatusEnum values of REGULAR and ADDED. 3. These resources are referenced by id in the periods. 4. Look up the resource in MasterDataDto. 5. Use displayName of the resource.  Display the resulting data in a suitable format.   Version history: - v1    2022-05     stw         Initial version  - v2    2023-02     stw         multiple ids as filter parameter / period as filter parameter / text fields in PeriodDto / deprecation of detailsUrl /                                 flag for online period / related period id for moved periods / period is modified when assigned students change - v3    2023-07     stw         Error handling now identical to other Untis APIs

The version of the OpenAPI document: 2.0.0
Contact: support@untis.at
Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'date'
require 'time'

module UntisTimetableClient
  # All masterdata objects used in the timetable.
  class MasterDataDto
    # All classes referenced in timetable periods.
    attr_accessor :classes

    # All departments referenced in timetable periods.
    attr_accessor :departments

    # All rooms referenced in timetable periods.
    attr_accessor :rooms

    # All student groups referenced in timetable periods.
    attr_accessor :student_groups

    # All students referenced in timetable periods.
    attr_accessor :students

    # All subjects referenced in timetable periods.
    attr_accessor :subjects

    # All teachers referenced in timetable periods.
    attr_accessor :teachers

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'classes' => :'classes',
        :'departments' => :'departments',
        :'rooms' => :'rooms',
        :'student_groups' => :'studentGroups',
        :'students' => :'students',
        :'subjects' => :'subjects',
        :'teachers' => :'teachers'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'classes' => :'Array<ClassDto>',
        :'departments' => :'Array<DepartmentDto>',
        :'rooms' => :'Array<RoomDto>',
        :'student_groups' => :'Array<StudentGroupDto>',
        :'students' => :'Array<StudentDto>',
        :'subjects' => :'Array<SubjectDto>',
        :'teachers' => :'Array<TeacherDto>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `UntisTimetableClient::MasterDataDto` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `UntisTimetableClient::MasterDataDto`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'classes')
        if (value = attributes[:'classes']).is_a?(Array)
          self.classes = value
        end
      end

      if attributes.key?(:'departments')
        if (value = attributes[:'departments']).is_a?(Array)
          self.departments = value
        end
      end

      if attributes.key?(:'rooms')
        if (value = attributes[:'rooms']).is_a?(Array)
          self.rooms = value
        end
      end

      if attributes.key?(:'student_groups')
        if (value = attributes[:'student_groups']).is_a?(Array)
          self.student_groups = value
        end
      end

      if attributes.key?(:'students')
        if (value = attributes[:'students']).is_a?(Array)
          self.students = value
        end
      end

      if attributes.key?(:'subjects')
        if (value = attributes[:'subjects']).is_a?(Array)
          self.subjects = value
        end
      end

      if attributes.key?(:'teachers')
        if (value = attributes[:'teachers']).is_a?(Array)
          self.teachers = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] classes Value to be assigned
    def classes=(classes)
      if classes.nil?
        fail ArgumentError, 'classes cannot be nil'
      end

      @classes = classes
    end

    # Custom attribute writer method with validation
    # @param [Object] departments Value to be assigned
    def departments=(departments)
      if departments.nil?
        fail ArgumentError, 'departments cannot be nil'
      end

      @departments = departments
    end

    # Custom attribute writer method with validation
    # @param [Object] rooms Value to be assigned
    def rooms=(rooms)
      if rooms.nil?
        fail ArgumentError, 'rooms cannot be nil'
      end

      @rooms = rooms
    end

    # Custom attribute writer method with validation
    # @param [Object] student_groups Value to be assigned
    def student_groups=(student_groups)
      if student_groups.nil?
        fail ArgumentError, 'student_groups cannot be nil'
      end

      @student_groups = student_groups
    end

    # Custom attribute writer method with validation
    # @param [Object] students Value to be assigned
    def students=(students)
      if students.nil?
        fail ArgumentError, 'students cannot be nil'
      end

      @students = students
    end

    # Custom attribute writer method with validation
    # @param [Object] subjects Value to be assigned
    def subjects=(subjects)
      if subjects.nil?
        fail ArgumentError, 'subjects cannot be nil'
      end

      @subjects = subjects
    end

    # Custom attribute writer method with validation
    # @param [Object] teachers Value to be assigned
    def teachers=(teachers)
      if teachers.nil?
        fail ArgumentError, 'teachers cannot be nil'
      end

      @teachers = teachers
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          classes == o.classes &&
          departments == o.departments &&
          rooms == o.rooms &&
          student_groups == o.student_groups &&
          students == o.students &&
          subjects == o.subjects &&
          teachers == o.teachers
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [classes, departments, rooms, student_groups, students, subjects, teachers].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = UntisTimetableClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
